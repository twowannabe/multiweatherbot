import requests
import schedule
import time
import logging
from decouple import config
from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import threading
import openai
from bs4 import BeautifulSoup
from html import escape
import re
import asyncio
import psycopg2
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –∏ –±–æ—Ç—É
TELEGRAM_TOKEN = config('TELEGRAM_TOKEN')
API_KEY = config('OPENWEATHERMAP_API_KEY')
OPENAI_API_KEY = config('OPENAI_API_KEY')
NASA_API_KEY = config('NASA_API_KEY')

openai.api_key = OPENAI_API_KEY
bot = Bot(token=TELEGRAM_TOKEN)
application = Application.builder().token(TELEGRAM_TOKEN).build()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
chat_location = {}
monitoring_chats = {}
previous_temperature = None
user_signs = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return psycopg2.connect(
        host=config('DB_HOST'),
        port=config('DB_PORT'),
        dbname=config('DB_NAME'),
        user=config('DB_USER'),
        password=config('DB_PASSWORD')
    )

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_location_to_db(chat_id, lat, lon):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO user_locations (chat_id, latitude, longitude) VALUES (%s, %s, %s) "
        "ON CONFLICT (chat_id) DO UPDATE SET latitude = %s, longitude = %s",
        (chat_id, lat, lon, lat, lon)
    )
    conn.commit()
    cursor.close()
    conn.close()

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_all_locations():
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    cursor.execute("SELECT chat_id, latitude, longitude FROM user_locations")
    locations = cursor.fetchall()
    cursor.close()
    conn.close()
    return {row['chat_id']: (row['latitude'], row['longitude']) for row in locations}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã
def get_water_temperature():
    url = 'https://world-weather.ru/pogoda/montenegro/budva/water/'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')
        temp_element = soup.find('div', id='weather-now-number')

        if temp_element:
            temp_text = temp_element.get_text(strip=True)
            match = re.search(r'([-+]?\d+)', temp_text)
            if match:
                return float(match.group(1))
        return None
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã: {e}")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã
def check_water_temperature():
    global previous_temperature
    current_temperature = get_water_temperature()

    if current_temperature is not None:
        if previous_temperature is None:
            previous_temperature = current_temperature
        elif current_temperature < previous_temperature:
            message = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã —É–ø–∞–ª–∞! –°–µ–π—á–∞—Å: {current_temperature}¬∞C, —Ä–∞–Ω–µ–µ: {previous_temperature}¬∞C."
            asyncio.run(send_notification_to_all_users(message))
        previous_temperature = current_temperature

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_notification_to_all_users(message):
    for chat_id in monitoring_chats.keys():
        try:
            await application.bot.send_message(chat_id=chat_id, text=message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
def get_temperature(lat, lon):
    url = f'http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_KEY}&units=metric&lang=ru'
    response = requests.get(url)
    data = response.json()

    if response.status_code == 200 and 'main' in data and 'temp' in data['main']:
        return data['main']['temp']
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ: {response.status_code}")
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
def get_forecast(lat, lon):
    url = f'http://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={API_KEY}&units=metric&lang=ru'
    response = requests.get(url)
    data = response.json()

    if response.status_code == 200:
        return [f"{entry['dt_txt']}: {entry['main']['temp']}¬∞C, {entry['weather'][0]['description']}" for entry in data['list'][:4]]
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {response.status_code}")
    return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —é–º–æ—Ä–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
def generate_funny_forecast_with_openai(forecast):
    forecast_text = "\n".join(forecast)
    messages = [
        {"role": "system", "content": "You are a humorous weather forecaster. Write in Russian with humor and emojis."},
        {"role": "user", "content": f"Create a funny forecast for the next 12 hours: \n{forecast_text}."}
    ]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=500,
            temperature=0.5
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑, –Ω–æ –ø–æ–≥–æ–¥–∞ —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π! üòÑ"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
def generate_horoscope_with_openai(sign):
    messages = [
        {"role": "system", "content": "You are an astrologer who writes daily horoscopes. Write in Russian with humor and emojis."},
        {"role": "user", "content": f"Write a horoscope for today for the zodiac sign {sign}."}
    ]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=300,
            temperature=0.7
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø, –Ω–æ —Å–¥–µ–ª–∞–π —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º! üòä"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å–ø—ã—à–∫–∞—Ö –Ω–∞ —Å–æ–ª–Ω—Ü–µ
def get_solar_flare_activity():
    url = f"https://api.nasa.gov/DONKI/FLR?startDate={time.strftime('%Y-%m-%d')}&api_key={NASA_API_KEY}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        if data:
            flare_events = [f"–ö–ª–∞—Å—Å {event.get('classType', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –≤—Å–ø—ã—à–∫–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ {event.get('beginTime', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è')}" for event in data]
            return flare_events if flare_events else None
        return None
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–µ–∫
async def send_solar_flare_forecast():
    flare_events = get_solar_flare_activity()
    if flare_events:
        message = "–í–Ω–∏–º–∞–Ω–∏–µ! –í—Å–ø—ã—à–∫–∏ –Ω–∞ —Å–æ–ª–Ω—Ü–µ –æ–∂–∏–¥–∞—é—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 12 —á–∞—Å–æ–≤:\n" + "\n".join(flare_events)
    else:
        message = "–í –±–ª–∏–∂–∞–π—à–∏–µ 12 —á–∞—Å–æ–≤ –≤—Å–ø—ã—à–µ–∫ –Ω–∞ —Å–æ–ª–Ω—Ü–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è."

    for chat_id in monitoring_chats.keys():
        try:
            await application.bot.send_message(chat_id=chat_id, text=message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        chat_location[chat_id] = (lat, lon)
        monitoring_chats[chat_id] = (lat, lon)
        save_location_to_db(chat_id, lat, lon)
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
monitoring_chats = load_all_locations()
chat_location = monitoring_chats.copy()

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def schedule_morning_forecast(time_str):
    schedule.every().day.at(time_str).do(lambda: asyncio.run(send_morning_forecast()))

def schedule_water_check():
    schedule.every(60).minutes.do(check_water_temperature)

def schedule_solar_flare_check():
    schedule.every(12).hours.do(lambda: asyncio.run(send_solar_flare_forecast()))

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == '__main__':
    schedule_morning_forecast("08:00")
    schedule_water_check()
    schedule_solar_flare_check()
    threading.Thread(target=run_scheduler, daemon=True).start()
    application.run_polling()
