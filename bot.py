import requests
import schedule
import time
import logging
from decouple import config
from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import threading
from bs4 import BeautifulSoup
from html import escape
import asyncio
import psycopg2
from psycopg2.extras import RealDictCursor
import datetime
import pytz
import re
from asyncio import Queue

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –∏ –±–æ—Ç—É
TELEGRAM_TOKEN = config('TELEGRAM_TOKEN')
API_KEY = config('OPENWEATHERMAP_API_KEY')
NASA_API_KEY = config('NASA_API_KEY')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
bot = Bot(token=TELEGRAM_TOKEN)
application = Application.builder().token(TELEGRAM_TOKEN).build()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
chat_location = {}
monitoring_chats = {}
previous_temperature = None
message_queue = Queue()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    return psycopg2.connect(
        host=config('DB_HOST'),
        port=config('DB_PORT'),
        dbname=config('DB_NAME'),
        user=config('DB_USER'),
        password=config('DB_PASSWORD')
    )

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_location_to_db(chat_id, lat, lon):
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {lat}, {lon}")
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO user_locations (chat_id, latitude, longitude) VALUES (%s, %s, %s) "
        "ON CONFLICT (chat_id) DO UPDATE SET latitude = %s, longitude = %s",
        (chat_id, lat, lon, lat, lon)
    )
    conn.commit()
    cursor.close()
    conn.close()

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_all_locations():
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    cursor.execute("SELECT chat_id, latitude, longitude FROM user_locations")
    locations = cursor.fetchall()
    cursor.close()
    conn.close()
    return {row['chat_id']: (row['latitude'], row['longitude']) for row in locations}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã
def get_water_temperature():
    url = 'https://world-weather.ru/pogoda/montenegro/budva/water/'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã –ø–æ URL: {url}")

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')
        temp_element = soup.find('div', id='weather-now-number')

        if temp_element:
            temp_text = temp_element.get_text(strip=True)
            match = re.search(r'([-+]?\d+)', temp_text)
            if match:
                temperature = float(match.group(1))
                logger.info(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞: {temperature}¬∞C")
                return temperature
        logger.warning("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return None
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–∑–¥—É—Ö–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
def get_temperature(lat, lon):
    url = f'http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_KEY}&units=metric&lang=ru'
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–∑–¥—É—Ö–∞ –ø–æ URL: {url}")
    try:
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200 and 'main' in data and 'temp' in data['main']:
            temperature = data['main']['temp']
            logger.info(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞: {temperature}¬∞C")
            return temperature
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ: {response.status_code}")
        return None
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenWeatherMap: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
def get_forecast(lat, lon):
    url = f'http://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={API_KEY}&units=metric&lang=ru'
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ URL: {url}")
    try:
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200:
            forecast_data = [
                f"{entry['dt_txt']}: {entry['main']['temp']}¬∞C, {entry['weather'][0]['description']}"
                for entry in data['list'][:4]
            ]
            logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {forecast_data}")
            return forecast_data
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {response.status_code}")
        return None
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenWeatherMap –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö
def get_solar_flare_activity():
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
    now = datetime.datetime.now(datetime.timezone.utc)
    yesterday = (now - datetime.timedelta(days=1)).strftime('%Y-%m-%d')
    tomorrow = (now + datetime.timedelta(days=1)).strftime('%Y-%m-%d')

    # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –ø–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    url = f"https://api.nasa.gov/DONKI/FLR?startDate={yesterday}&endDate={tomorrow}&api_key={NASA_API_KEY}"
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö –ø–æ URL: {url}")

    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        logger.info(f"–î–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω—ã: {data}")

        if data:
            past_flares = []
            future_flares = []

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É GMT+1
            gmt_plus_one = pytz.timezone('Europe/Brussels')

            for event in data:
                class_type = event.get('classType', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                begin_time = event.get('beginTime', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è')

                # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –≤—Å–ø—ã—à–∫–∏
                try:
                    begin_time_iso = begin_time.replace('Z', '+00:00')
                    dt_begin = datetime.datetime.fromisoformat(begin_time_iso)
                    dt_begin = dt_begin.astimezone(gmt_plus_one)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ GMT+1
                    logger.info(f"–í—Å–ø—ã—à–∫–∞ –∫–ª–∞—Å—Å–∞ {class_type} –≤ {dt_begin}")
                except ValueError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –≤—Å–ø—ã—à–∫–∏: {e}")
                    dt_begin = None

                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤—Å–ø—ã—à–µ–∫ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –∏ –æ–∂–∏–¥–∞–µ–º—ã–µ
                if dt_begin:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                    begin_time_formatted = dt_begin.strftime('%d.%m.%Y %H:%M GMT+1')

                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ —ç–º–æ–¥–∑–∏
                    if class_type.startswith('A') or class_type.startswith('B'):
                        intensity = '–Ω–∏–∑–∫–∞—è'
                        emoji = 'üü¢'
                    elif class_type.startswith('C'):
                        intensity = '—Å—Ä–µ–¥–Ω—è—è'
                        emoji = 'üü°'
                    elif class_type.startswith('M'):
                        intensity = '–≤—ã—Å–æ–∫–∞—è'
                        emoji = 'üü†'
                    elif class_type.startswith('X'):
                        intensity = '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'
                        emoji = 'üî¥'
                    else:
                        intensity = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'
                        emoji = '‚ö™'

                    if dt_begin < now:
                        # –ü—Ä–æ—à–µ–¥—à–∏–µ –≤—Å–ø—ã—à–∫–∏
                        status = "–ø—Ä–æ–∏–∑–æ—à–ª–∞"
                        flare_event = f"{emoji} –í—Å–ø—ã—à–∫–∞ –∫–ª–∞—Å—Å–∞ {class_type} ({intensity} –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å) {status} –≤ {begin_time_formatted}"
                        past_flares.append(flare_event)
                    else:
                        # –û–∂–∏–¥–∞–µ–º—ã–µ –≤—Å–ø—ã—à–∫–∏
                        status = "–æ–∂–∏–¥–∞–µ—Ç—Å—è"
                        flare_event = f"{emoji} –í—Å–ø—ã—à–∫–∞ –∫–ª–∞—Å—Å–∞ {class_type} ({intensity} –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å) {status} –≤ {begin_time_formatted}"
                        future_flares.append(flare_event)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            flare_messages = []

            if past_flares:
                flare_messages.append("*–ü—Ä–æ–∏–∑–æ—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –≤—Å–ø—ã—à–∫–∏ –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è:*")
                flare_messages.extend(past_flares)

            if future_flares:
                flare_messages.append("*–û–∂–∏–¥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –≤—Å–ø—ã—à–∫–∏ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞:*")
                flare_messages.extend(future_flares)

            if flare_messages:
                # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                final_message = "\n".join(flare_messages)
                return final_message
            else:
                logger.info("–í—Å–ø—ã—à–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞")
                return "–í—Å–ø—ã—à–µ–∫ –Ω–∞ –°–æ–ª–Ω—Ü–µ –∑–∞ –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ."

        logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö")
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö."
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã
async def check_water_temperature():
    global previous_temperature
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã")
    current_temperature = get_water_temperature()

    if current_temperature is not None:
        if previous_temperature is None:
            previous_temperature = current_temperature
        elif current_temperature < previous_temperature:
            message = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã —É–ø–∞–ª–∞! –°–µ–π—á–∞—Å: {current_temperature}¬∞C, —Ä–∞–Ω–µ–µ: {previous_temperature}¬∞C."
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã")
            await send_notification_to_all_users(message)
        previous_temperature = current_temperature

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
async def send_notification_to_all_users(message):
    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    for chat_id in monitoring_chats.keys():
        await message_queue.put((chat_id, message))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def process_queue():
    while True:
        chat_id, message = await message_queue.get()
        try:
            await application.bot.send_message(chat_id=chat_id, text=message)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        finally:
            message_queue.task_done()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –ª–æ–∫–∞—Ü–∏–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    await update.message.reply_text(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."
    )
    if chat_id not in monitoring_chats:
        monitoring_chats[chat_id] = None

async def temp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /temp –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    if chat_id in chat_location:
        lat, lon = chat_location[chat_id]
        temp = get_temperature(lat, lon)
        if temp is not None:
            await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {temp}¬∞C")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ.")
    else:
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é.")

async def water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /water –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    temperature = get_water_temperature()
    if temperature is not None:
        await update.message.reply_text(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –≤ –ë—É–¥–≤–µ: {temperature}¬∞C")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤–æ–¥—ã.")

async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /forecast –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    if chat_id in chat_location:
        lat, lon = chat_location[chat_id]
        temp = get_temperature(lat, lon)
        forecast_data = get_forecast(lat, lon)
        if temp is not None and forecast_data is not None:
            forecast = "\n".join(forecast_data)
            forecast_message = f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {temp}¬∞C\n–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:\n{forecast}"
            forecast_message = escape(forecast_message)
            await update.message.reply_text(forecast_message, parse_mode="HTML")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ.")
    else:
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é.")

async def solarflare(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /solarflare –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    flare_events = get_solar_flare_activity()
    if flare_events:
        await update.message.reply_text(flare_events, parse_mode="Markdown")
    else:
        await update.message.reply_text("–í –±–ª–∏–∂–∞–π—à–∏–µ 12 —á–∞—Å–æ–≤ –≤—Å–ø—ã—à–µ–∫ –Ω–∞ —Å–æ–ª–Ω—Ü–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        chat_location[chat_id] = (lat, lon)
        monitoring_chats[chat_id] = (lat, lon)
        save_location_to_db(chat_id, lat, lon)
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
async def send_forecast_to_all_users():
    logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    for chat_id, (lat, lon) in monitoring_chats.items():
        temp = get_temperature(lat, lon)
        forecast_data = get_forecast(lat, lon)
        if temp is not None and forecast_data is not None:
            forecast = "\n".join(forecast_data)
            forecast_message = f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {temp}¬∞C\n–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:\n{forecast}"
            await message_queue.put((chat_id, forecast_message))
        else:
            await message_queue.put((chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ."))

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–µ–∫ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_solar_flare_forecast_to_all_users():
    logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    flare_events = get_solar_flare_activity()
    if flare_events:
        for chat_id in monitoring_chats.keys():
            await message_queue.put((chat_id, flare_events))
    else:
        for chat_id in monitoring_chats.keys():
            await message_queue.put((chat_id, "–í –±–ª–∏–∂–∞–π—à–∏–µ 12 —á–∞—Å–æ–≤ –≤—Å–ø—ã—à–µ–∫ –Ω–∞ —Å–æ–ª–Ω—Ü–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è."))

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def schedule_tasks():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    loop = asyncio.get_running_loop()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
    schedule.every(60).minutes.do(lambda: asyncio.run_coroutine_threadsafe(check_water_temperature(), loop))
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —É—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 08:00)
    schedule.every().day.at("08:00").do(lambda: asyncio.run_coroutine_threadsafe(send_forecast_to_all_users(), loop))
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤—Å–ø—ã—à–∫–∞—Ö –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
    schedule.every(12).hours.do(lambda: asyncio.run_coroutine_threadsafe(send_solar_flare_forecast_to_all_users(), loop))

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

# –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def on_startup(application):
    logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
    application.create_task(process_queue())
    schedule_tasks()
    threading.Thread(target=run_scheduler, daemon=True).start()

# –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    monitoring_chats = load_all_locations()
    chat_location = monitoring_chats.copy()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ monitoring_chats –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:")
    for chat_id, location in monitoring_chats.items():
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å –ª–æ–∫–∞—Ü–∏–µ–π: {location}")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('temp', temp_command))
    application.add_handler(CommandHandler('water', water))
    application.add_handler(CommandHandler('forecast', forecast))
    application.add_handler(CommandHandler('solarflare', solarflare))
    application.add_handler(MessageHandler(filters.LOCATION, location_handler))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ on_startup
    application.run_polling(on_startup=on_startup)
